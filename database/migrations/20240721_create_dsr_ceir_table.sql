-- Create CEIR data table with composite key
CREATE TABLE IF NOT EXISTS dsr_ceir_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    report_date DATE NOT NULL,
    table_number INTEGER NOT NULL,
    
    -- On Date stats
    on_date_blocking_requests INTEGER DEFAULT 0,
    on_date_imei_blocked INTEGER DEFAULT 0,
    on_date_phones_traced INTEGER DEFAULT 0,
    on_date_phones_recovered INTEGER DEFAULT 0,
    
    -- From Date stats
    from_date_blocking_requests INTEGER DEFAULT 0,
    from_date_imei_blocked INTEGER DEFAULT 0,
    from_date_phones_traced INTEGER DEFAULT 0,
    from_date_phones_recovered INTEGER DEFAULT 0,
    
    -- Year 2024 stats
    year_2024_blocking_requests INTEGER DEFAULT 0,
    year_2024_imei_blocked INTEGER DEFAULT 0,
    year_2024_phones_traced INTEGER DEFAULT 0,
    year_2024_phones_recovered INTEGER DEFAULT 0,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    created_by UUID REFERENCES auth.users(id),
    updated_by UUID REFERENCES auth.users(id),
    CONSTRAINT dsr_ceir_data_unique UNIQUE (user_id, report_date, table_number)
);

-- Add indexes
CREATE INDEX IF NOT EXISTS dsr_ceir_data_user_id_idx ON dsr_ceir_data(user_id);
CREATE INDEX IF NOT EXISTS dsr_ceir_data_report_date_idx ON dsr_ceir_data(report_date);
CREATE INDEX IF NOT EXISTS dsr_ceir_data_table_number_idx ON dsr_ceir_data(table_number);

-- Add RLS policies
ALTER TABLE dsr_ceir_data ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to view all records
CREATE POLICY "Allow authenticated users to view CEIR data"
    ON dsr_ceir_data
    FOR SELECT
    TO authenticated
    USING (true);

-- Allow users to insert their own records
CREATE POLICY "Allow users to insert their own CEIR data"
    ON dsr_ceir_data
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = created_by);

-- Allow users to update their own records
CREATE POLICY "Allow users to update their own CEIR data"
    ON dsr_ceir_data
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = created_by)
    WITH CHECK (auth.uid() = created_by);

-- Add trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc', NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_dsr_ceir_data_updated_at
    BEFORE UPDATE ON dsr_ceir_data
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
